name: Python bindings

on:
    push:
    pull_request:

env:
    HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1
    HOMEBREW_NO_AUTO_UPDATE: 1
permissions:
    contents: write
jobs:
name: Python bindings

on:
  push:
  pull_request:

env:
  HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1
  HOMEBREW_NO_AUTO_UPDATE: 1

jobs:
  build:
    name: build on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']

    steps:
      - name: Download source
        run: |
          git clone https://github.com/arvidn/libtorrent.git --depth=1 --recurse-submodules --branch master

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # === SCCACHE SETUP ===
      - name: Install sccache (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          curl -L https://github.com/mozilla/sccache/releases/latest/download/sccache-x86_64-unknown-linux-musl.tar.gz | tar -xz
          sudo mv sccache /usr/local/bin/sccache

      - name: Install sccache (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Invoke-WebRequest -Uri https://github.com/mozilla/sccache/releases/latest/download/sccache.exe -OutFile sccache.exe
          Move-Item sccache.exe "C:\Program Files\sccache.exe"

      - name: Set sccache environment (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          echo "SCCACHE_START_SERVER=1" >> $GITHUB_ENV
          echo "CC=sccache gcc" >> $GITHUB_ENV
          echo "CXX=sccache g++" >> $GITHUB_ENV

      - name: Set sccache environment (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          echo "C:\Program Files" | Out-File -Append -FilePath $env:GITHUB_PATH
          echo "RUSTC_WRAPPER=C:\Program Files\sccache.exe" | Out-File -Append -FilePath $env:GITHUB_ENV
          echo "SCCACHE_START_SERVER=1" | Out-File -Append -FilePath $env:GITHUB_ENV
          echo "CC=sccache cl" | Out-File -Append -FilePath $env:GITHUB_ENV
          echo "CXX=sccache cl" | Out-File -Append -FilePath $env:GITHUB_ENV

      # === OS-SPECIFIC DEPENDENCIES ===
      - name: dependencies (MacOS)
        if: runner.os == 'macOS'
        run: |
          cd libtorrent
          brew install python@${{ matrix.python-version }} openssl@3 python-setuptools
          export PATH=$(brew --prefix)/opt/python@${{ matrix.python-version }}/bin:$PATH

      - name: Install Visual Studio 2019 Build Tools
        if: runner.os == 'Windows'
        run: |
          choco install visualstudio2019buildtools `
            --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --includeRecommended --quiet --norestart" `
            -y

      - name: Set up MSVC 2019
        uses: ilammy/msvc-dev-cmd@v1
        if: runner.os == 'Windows'
        with:
          arch: x64
          toolset: 14.2
          vsversion: '16.0'

      - name: Install OpenSSL (vcpkg, win64)
        if: runner.os == 'Windows'
        run: |
          vcpkg install openssl:x64-windows
          Remove-Item -Path "C:\Program Files\OpenSSL" -Force -Recurse -ErrorAction SilentlyContinue
          New-Item -Path "C:\OpenSSL-Win64" -ItemType SymbolicLink -Value "C:\vcpkg\packages\openssl_x64-windows"

      - name: Set OpenSSL Paths (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          setx OPENSSL_ROOT_DIR "C:\OpenSSL-Win64" /M
          setx OPENSSL_INCLUDE_DIR "C:\OpenSSL-Win64\include" /M
          setx OPENSSL_LIB_DIR "C:\OpenSSL-Win64\lib" /M
          setx INCLUDE "C:\OpenSSL-Win64\include;%INCLUDE%" /M
          setx LIB "C:\OpenSSL-Win64\lib;%LIB%" /M

      - name: Upgrade pip and setuptools
        run: |
          python -m pip install --upgrade pip setuptools wheel

      - name: update package lists (linux)
        if: runner.os == 'Linux'
        continue-on-error: true
        run: |
          cd libtorrent
          sudo apt update

      # === BOOST INSTALL ===
      - name: install boost (Linux)
        if: runner.os == 'Linux'
        run: |
          cd libtorrent
          git clone --depth=1 --recurse-submodules --branch=boost-1.84.0 https://github.com/boostorg/boost.git
          cd boost
          ./bootstrap.sh

      - name: boost headers (Linux)
        if: runner.os == 'Linux'
        run: |
          cd libtorrent/boost
          ./b2 headers

      - name: install boost (macOS)
        if: runner.os == 'macOS'
        run: |
          cd libtorrent
          git clone --depth=1 --recurse-submodules --branch=boost-1.84.0 https://github.com/boostorg/boost.git
          cd boost
          ./bootstrap.sh

      - name: boost headers (macOS)
        if: runner.os == 'macOS'
        run: |
          cd libtorrent/boost
          ./b2 headers

      - name: install boost (windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          cd libtorrent
          git clone --depth=1 --recurse-submodules -j10 --branch=boost-1.84.0 https://github.com/boostorg/boost.git
          cd boost
          bootstrap.bat

      - name: boost headers (windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          cd libtorrent\boost
          .\b2 headers

      # === BUILD ===
      - name: build/install (windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          cd libtorrent
          set BOOST_ROOT=%CD%\boost
          set BOOST_BUILD_PATH=%BOOST_ROOT%\tools\build
          set PATH=%BOOST_ROOT%;%PATH%
          cd bindings\python
          py -${{ matrix.python-version }} setup.py build_ext --b2-args "asserts=on invariant-checks=full webtorrent=on" install --user --prefix=

      - name: build/install (Linux)
        if: runner.os == 'Linux'
        run: |
          cd libtorrent
          export BOOST_ROOT=$PWD/boost
          export BOOST_BUILD_PATH=$BOOST_ROOT/tools/build
          export PATH=$BOOST_ROOT:$PATH
          cd bindings/python
          python${{ matrix.python-version }} setup.py build_ext --b2-args "asserts=on invariant-checks=full webtorrent=on" install --user --prefix=

      - name: build/install (macOS)
        if: runner.os == 'macOS'
        run: |
          export PATH=$(brew --prefix)/opt/python@${{ matrix.python-version }}/bin:$PATH
          cd libtorrent
          export BOOST_ROOT=$PWD/boost
          export BOOST_BUILD_PATH=$BOOST_ROOT/tools/build
          export PATH=$BOOST_ROOT:$PATH
          cd bindings/python
          python${{ matrix.python-version }} setup.py build_ext --b2-args "asserts=on invariant-checks=full webtorrent=on" install --user --prefix=

      - name: Show sccache stats
        run: |
          sccache --show-stats || true
        shell: bash

      # === ARTIFACTS ===
      - name: Upload build directory (all OS)
        uses: actions/upload-artifact@v4
        with:
          name: python-bindings-${{ matrix.os }}-py${{ matrix.python-version }}-build
          path: libtorrent/bindings/pyth

  release:
      name: Upload Release Artifacts
      needs: build
      if: startsWith(github.ref, 'refs/tags/')
      runs-on: ubuntu-latest

      steps:
          - name: Download all artifacts
            uses: actions/download-artifact@v4
            with:
                path: artifacts

          - name: Display downloaded files
            run: ls -R artifacts

          - name: Upload to GitHub Release
            uses: softprops/action-gh-release@v1
            with:
                files: artifacts/**/*
            env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
