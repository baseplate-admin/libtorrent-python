name: Python bindings

on:
    push:
    pull_request:

env:
    HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1
    HOMEBREW_NO_AUTO_UPDATE: 1
    OPENSSL_USE_STATIC_LIBS: 1
permissions:
    contents: write

jobs:
    build:
        name: build on ${{ matrix.os }} with Python ${{ matrix.python-version }}
        runs-on: ${{ matrix.os }}

        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest, macos-latest, windows-latest]
                python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']

        steps:
            - name: Checkout repo with patches
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: Download source
              run: |
                  git clone https://github.com/arvidn/libtorrent.git --depth=1 --recurse-submodules --branch master

            - name: Apply patches (Linux/macOS)
              if: runner.os != 'Windows'
              run: |
                  for patchfile in patches/*.patch; do
                    echo "Applying $patchfile"
                    patch -p1 -d libtorrent < "$patchfile"
                  done

            - name: Apply patches (Windows)
              if: runner.os == 'Windows'
              shell: pwsh
              run: |
                  Get-ChildItem patches\*.patch | ForEach-Object {
                    Write-Host "Applying $($_.FullName)"
                    git apply --directory=libtorrent $_.FullName
                  }

            - name: Setup Python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ matrix.python-version }}

            - name: Install Visual Studio 2019 Build Tools
              if: runner.os == 'Windows'
              run: |
                  choco install visualstudio2019buildtools `
                    --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --includeRecommended --quiet --norestart" ` -y

            - name: Set up MSVC 2019
              uses: ilammy/msvc-dev-cmd@v1
              if: runner.os == 'Windows'
              with:
                  arch: x64
                  toolset: 14.2
                  vsversion: '16.0'

            - name: Install OpenSSL (vcpkg, static, win64)
              if: runner.os == 'Windows'
              run: |
                  vcpkg install openssl:x64-windows-static
                  Remove-Item -Path "C:\OpenSSL-Win64" -Force -Recurse -ErrorAction SilentlyContinue
                  New-Item -Path "C:\OpenSSL-Win64" -ItemType SymbolicLink -Value "C:\vcpkg\packages\openssl_x64-windows-static"

            - name: Set OpenSSL Paths (Windows)
              if: runner.os == 'Windows'
              shell: cmd
              run: |
                  setx OPENSSL_ROOT_DIR "C:\OpenSSL-Win64" /M
                  setx OPENSSL_INCLUDE_DIR "C:\OpenSSL-Win64\include" /M
                  setx OPENSSL_LIB_DIR "C:\OpenSSL-Win64\lib" /M
                  setx INCLUDE "C:\OpenSSL-Win64\include;%INCLUDE%" /M
                  setx LIB "C:\OpenSSL-Win64\lib;%LIB%" /M

            - name: dependencies (macOS)
              if: runner.os == 'macOS'
              run: |
                  brew install python@${{ matrix.python-version }} python-setuptools cmake make
                  brew unlink openssl@3 || true
                  curl -LO https://www.openssl.org/source/openssl-3.2.1.tar.gz
                  tar -xf openssl-3.2.1.tar.gz
                  cd openssl-3.2.1
                  ./Configure darwin64-x86_64-cc no-shared --prefix=$HOME/openssl-static
                  make -j$(sysctl -n hw.logicalcpu)
                  make install_sw
                  echo "OPENSSL_ROOT_DIR=$HOME/openssl-static" >> $GITHUB_ENV
                  echo "LDFLAGS=-L$HOME/openssl-static/lib -static" >> $GITHUB_ENV
                  echo "CPPFLAGS=-I$HOME/openssl-static/include" >> $GITHUB_ENV

            - name: Set OpenSSL flags (Linux)
              if: runner.os == 'Linux'
              run: |
                  sudo apt update
                  sudo apt install libssl-dev build-essential cmake python3-dev -y
                  echo "LDFLAGS=-static -lssl -lcrypto -ldl -pthread" >> $GITHUB_ENV
                  echo "CPPFLAGS=" >> $GITHUB_ENV

            - name: Upgrade pip and setuptools
              run: |
                  python -m pip install --upgrade pip setuptools wheel

            - name: Setup ccache
              if: runner.os != 'Windows'
              uses: Chocobo1/setup-ccache-action@v1
              with:
                  update_packager_index: false
                  override_cache_key: ccache-python-${{ matrix.os }}-${{ github.base_ref }}-${{ matrix.python-version }}
                  ccache_options: |
                      max_size=500M

            # ===== BOOST STEPS =====
            - name: install boost
              run: |
                  cd libtorrent
                  git clone --depth=1 --recurse-submodules --branch=boost-1.88.0 https://github.com/boostorg/boost.git
                  cd boost
                  ./bootstrap.sh || ./bootstrap.bat

            - name: boost headers
              run: |
                  cd libtorrent/boost
                  ./b2 headers || .\b2 headers

            # ===== BUILD STEPS =====
            - name: build/install (windows)
              if: runner.os == 'Windows'
              shell: cmd
              run: |
                  cd libtorrent
                  set BOOST_ROOT=%CD%\boost
                  set BOOST_BUILD_PATH=%BOOST_ROOT%\tools\build
                  set PATH=%BOOST_ROOT%;%PATH%
                  cd bindings\python
                  py -${{ matrix.python-version }} setup.py build_ext --b2-args "asserts=on invariant-checks=full webtorrent=on openssl-link=static link=static" install --user --prefix=

            - name: build/install (Linux)
              if: runner.os == 'Linux'
              run: |
                  cd libtorrent
                  export BOOST_ROOT=$PWD/boost
                  export BOOST_BUILD_PATH=$BOOST_ROOT/tools/build
                  export PATH=$BOOST_ROOT:$PATH
                  cd bindings/python
                  python${{ matrix.python-version }} setup.py build_ext --b2-args "asserts=on invariant-checks=full webtorrent=on openssl-link=static link=static" install --user --prefix=

            - name: build/install (macOS)
              if: runner.os == 'macOS'
              run: |
                  export PATH=$(brew --prefix)/opt/python@${{ matrix.python-version }}/bin:$PATH
                  cd libtorrent
                  export BOOST_ROOT=$PWD/boost
                  export BOOST_BUILD_PATH=$BOOST_ROOT/tools/build
                  export PATH=$BOOST_ROOT:$PATH
                  cd bindings/python
                  python${{ matrix.python-version }} setup.py build_ext --b2-args "asserts=on invariant-checks=full webtorrent=on openssl-link=static link=static" install --user --prefix=

            # ===== ARTIFACTS =====
            - name: Upload build directory (all OS)
              uses: actions/upload-artifact@v4
              with:
                  name: python-bindings-${{ matrix.os }}-py${{ matrix.python-version }}-build
                  path: libtorrent/bindings/python/build/

    release:
        name: Upload Release Artifacts
        needs: build
        if: startsWith(github.ref, 'refs/tags/')
        runs-on: ubuntu-latest

        steps:
            - name: Download all artifacts
              uses: actions/download-artifact@v4
              with:
                  path: artifacts

            - name: Display downloaded files
              run: ls -R artifacts

            - name: Zip each artifact folder
              run: |
                  mkdir zipped
                  for dir in artifacts/*; do
                    name=$(basename "$dir")
                    zip -r "zipped/${name}.zip" "$dir"
                  done
                  ls -lh zipped/

            - name: Upload zipped artifacts to GitHub Release
              uses: softprops/action-gh-release@v1
              with:
                  files: zipped/*.zip
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
