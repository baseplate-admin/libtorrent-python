# .github/workflows/build-libtorrent.yml
name: Build libtorrent (WebTorrent + Python) on Windows/Linux/macOS

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]
    workflow_dispatch:

jobs:
    build:
        name: ${{ matrix.os }} build
        runs-on: ${{ matrix.os }}

        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest, macos-latest, windows-latest]

        steps:
            - name: Checkout repo
              uses: actions/checkout@v3

            - name: Setup Python 3.11
              uses: actions/setup-python@v5
              with:
                  python-version: '3.11'

            # ───── System Dependencies ───────────────────────────────────────────────
            - name: Install base tools on Linux
              if: runner.os == 'Linux'
              run: |
                  sudo apt update
                  sudo apt install -y \
                    build-essential cmake git ninja-build \
                    python3-dev python3-pip libbz2-dev zlib1g-dev
                  python3 -m pip install --upgrade wheel setuptools

            - name: Add swap on Linux (4 GB)
              if: runner.os == 'Linux'
              run: |
                  sudo fallocate -l 4G /swapfile
                  sudo chmod 600 /swapfile
                  sudo mkswap /swapfile
                  sudo swapon /swapfile

            - name: Install base tools on macOS
              if: runner.os == 'macOS'
              run: |
                  brew update
                  brew install cmake git ninja python@3.11
                  python3 -m pip install --upgrade wheel setuptools

            - name: Install base tools on Windows
              if: runner.os == 'Windows'
              shell: pwsh
              run: |
                  choco install -y cmake --installargs '"ADD_CMAKE_TO_PATH=System"'
                  choco install -y ninja
                  python -m pip install --upgrade wheel setuptools

            # ───── Build OpenSSL (static) ───────────────────────────────────────────
            - name: Build OpenSSL (static)
              shell: bash
              run: |
                  git clone https://github.com/openssl/openssl.git
                  cd openssl

                  # Use newer OpenSSL version for better Windows support
                  git checkout openssl-3.2.2
                  mkdir -p $GITHUB_WORKSPACE/ssl

                  case $RUNNER_OS in
                    Linux|macOS)
                      ./config --prefix=$GITHUB_WORKSPACE/ssl no-shared
                      make -j$(nproc)
                      make install
                      ;;
                    Windows)
                      # Install required Perl modules on Windows
                      curl -L https://cpanmin.us | perl - App::cpanminus
                      cpanm Locale::Maketext::Simple
                      
                      # Build OpenSSL
                      perl Configure VC-WIN64A --prefix=$GITHUB_WORKSPACE/ssl no-shared
                      nmake
                      nmake install
                      ;;
                  esac

            # ───── Build Boost (static) ─────────────────────────────────────────────
            - name: Build Boost (static)
              shell: bash
              run: |
                  BOOST_VERSION=1.83.0
                  wget https://boostorg.jfrog.io/artifactory/main/release/$BOOST_VERSION/source/boost_${BOOST_VERSION//./_}.tar.gz
                  tar xf boost_*.tar.gz
                  cd boost_*/

                  case $RUNNER_OS in
                    Linux|macOS)
                      ./bootstrap.sh --with-python=python3.11
                      ./b2 -j$(nproc) install \
                          --prefix=$GITHUB_WORKSPACE/boost \
                          link=static \
                          runtime-link=static \
                          cxxflags="-fPIC" \
                          --with-system \
                          --with-python
                      ;;
                    Windows)
                      ./bootstrap.bat
                      ./b2 -j$NUMBER_OF_PROCESSORS install \
                          --prefix=$GITHUB_WORKSPACE/boost \
                          link=static \
                          runtime-link=static \
                          variant=release \
                          address-model=64 \
                          --with-system \
                          --with-python
                      ;;
                  esac

            # ───── Build WebSocket++ (static) ───────────────────────────────────────
            - name: Build WebSocket++ (static)
              shell: bash
              run: |
                  git clone https://github.com/zaphoyd/websocketpp.git
                  cd websocketpp
                  mkdir build && cd build
                  cmake -G Ninja .. \
                    -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/websocketpp \
                    -DBUILD_TESTS=OFF \
                    -DBUILD_EXAMPLES=OFF
                  ninja
                  ninja install

            # ───── Clone libtorrent ────────────────────────────────────────────────
            - name: Clone libtorrent
              run: |
                  git clone --recurse-submodules https://github.com/arvidn/libtorrent.git
                  cd libtorrent
                  git checkout RC_2_0

            # ───── Build libtorrent (static) ───────────────────────────────────────
            - name: Build libtorrent core
              shell: bash
              run: |
                  cd libtorrent
                  mkdir build && cd build

                  CMAKE_ARGS=(
                    "-G Ninja"
                    "-DCMAKE_BUILD_TYPE=Release"
                    "-DCMAKE_CXX_STANDARD=17"
                    "-DBUILD_TESTING=OFF"
                    "-DBUILD_EXAMPLES=ON"
                    "-DBUILD_TOOLS=OFF"
                    "-DBUILD_PYTHON_BINDINGS=ON"
                    "-DBUILD_WEBTORRENT=ON"
                    "-DWEBSOCKETPP_ROOT=$GITHUB_WORKSPACE/websocketpp"
                    "-DOPENSSL_ROOT_DIR=$GITHUB_WORKSPACE/ssl"
                    "-DBoost_USE_STATIC_LIBS=ON"
                    "-DBoost_USE_STATIC_RUNTIME=ON"
                    "-DBOOST_ROOT=$GITHUB_WORKSPACE/boost"
                    "-DBoost_NO_SYSTEM_PATHS=ON"
                    "-DOPENSSL_USE_STATIC_LIBS=ON"
                  )

                  case $RUNNER_OS in
                    Windows)
                      CMAKE_ARGS+=("-DCMAKE_CXX_FLAGS=/DBOOST_ALL_NO_LIB")
                      ;;
                  esac

                  cmake .. ${CMAKE_ARGS[@]}
                  ninja

            # ───── Build Python wheel ──────────────────────────────────────────────
            - name: Build Python bindings
              shell: bash
              run: |
                  cd libtorrent/bindings/python

                  # Set library paths
                  case $RUNNER_OS in
                    Linux)
                      export LD_LIBRARY_PATH="$GITHUB_WORKSPACE/ssl/lib64:$LD_LIBRARY_PATH"
                      ;;
                    macOS)
                      export DYLD_LIBRARY_PATH="$GITHUB_WORKSPACE/ssl/lib:$DYLD_LIBRARY_PATH"
                      ;;
                  esac

                  python setup.py bdist_wheel

            # ───── Upload artifact ────────────────────────────────────────────────
            - name: Upload wheel artifact
              uses: actions/upload-artifact@v4
              with:
                  name: libtorrent-wheel-${{ matrix.os }}
                  path: libtorrent/bindings/python/dist/*.whl
